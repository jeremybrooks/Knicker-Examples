/*
 * Created by Jeremy Brooks, 2011. <jeremyb@whirljack.net>
 * Free for personal or commercial use, with or without modification.
 * No warranty is expressed or implied.
 *
 */
package net.jeremybrooks.knickerexamples;

import java.util.Properties;
import net.jeremybrooks.knickerexamples.definition.DefinitionExampleWindow;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.Logger;


/**
 *
 * @author jeremyb
 */
public class Startup extends javax.swing.JFrame {

    /* Logging */
    private static Logger logger = Logger.getLogger(Startup.class);


    /** Creates new form Startup */
    public Startup() {
	initComponents();
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Knicker Examples");

        jButton1.setText("Definitions");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Look up text definition and audio pronunciation for a word");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jButton1)
                    .add(jLabel2))
                .addContainerGap(217, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
	new DefinitionExampleWindow().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed


    /**
     * Start the app.
     *
     * No command line arguments are supported.
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
	java.awt.EventQueue.invokeLater(new Runnable() {

	    public void run() {
		// Configure logging
		BasicConfigurator.configure();

		// Load the Wordnik API key
		// Put your key in a file called secret.properties in the
		// src directory
		Properties p = new Properties();
		try {
		    p.load(DefinitionExampleWindow.class.getResourceAsStream("/secret.properties"));
		    String key = p.getProperty("WORDNIK_API_KEY");
		    if (key == null || key.isEmpty()) {
			throw new Exception("Property WORDNIK_API_KEY not found.");
		    }
		    System.setProperty("WORDNIK_API_KEY", key);
		} catch (Exception e) {
		    logger.fatal("Could not load api key from secret.properties.", e);
		    System.exit(1);
		}

		new Startup().setVisible(true);
	    }

	});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

}
